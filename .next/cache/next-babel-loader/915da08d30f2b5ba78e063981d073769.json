{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport remark from 'remark';\nimport html from 'remark-html';\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = path.join(process.cwd(), 'posts');\nexport async function getSortedPostsData() {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  }); // Sort posts by date\n\n  return allPostsData.sort(({\n    date: a\n  }, {\n    date: b\n  }) => {\n    if (a < b) {\n      return 1;\n    } else if (a > b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n}\nexport function getAllPostIds() {\n  const fileNames = fs.readdirSync(postsDirectory); // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport async function getPostData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString(); // Combine the data with the id and contentHtml\n\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["/Users/tunghoang/Datagency/datagency/lib/posts.js"],"names":["remark","html","fs","path","matter","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","date","a","b","getAllPostIds","params","getPostData","processedContent","use","content","contentHtml","toString"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAGA,MAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,eAAeC,kBAAf,GAAoC;AACzC;AACA,QAAMC,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,cAAf,CAAlB;AACA,QAAMO,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAeC,QAAD,IAAc;AAC/C;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF+C,CAI/C;;AACA,UAAMC,QAAQ,GAAGd,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA0BS,QAA1B,CAAjB;AACA,UAAMI,YAAY,GAAGhB,EAAE,CAACiB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAN+C,CAQ/C;;AACA,UAAMG,YAAY,GAAGhB,MAAM,CAACc,YAAD,CAA3B,CAT+C,CAW/C;;AACA;AACEH,MAAAA;AADF,OAEKK,YAAY,CAACC,IAFlB;AAID,GAhBoB,CAArB,CAHyC,CAoBzC;;AACA,SAAOT,YAAY,CAACU,IAAb,CAAkB,CAAC;AAAEC,IAAAA,IAAI,EAAEC;AAAR,GAAD,EAAc;AAAED,IAAAA,IAAI,EAAEE;AAAR,GAAd,KAA8B;AACrD,QAAID,CAAC,GAAGC,CAAR,EAAW;AACT,aAAO,CAAP;AACD,KAFD,MAEO,IAAID,CAAC,GAAGC,CAAR,EAAW;AAChB,aAAO,CAAC,CAAR;AACD,KAFM,MAEA;AACL,aAAO,CAAP;AACD;AACF,GARM,CAAP;AASD;AAED,OAAO,SAASC,aAAT,GAAyB;AAC5B,QAAMhB,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,cAAf,CAAlB,CAD4B,CAG5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOK,SAAS,CAACG,GAAV,CAAeC,QAAD,IAAc;AACjC,WAAO;AACLa,MAAAA,MAAM,EAAE;AACNZ,QAAAA,EAAE,EAAED,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AAED,OAAO,eAAeY,WAAf,CAA2Bb,EAA3B,EAA+B;AACpC,QAAME,QAAQ,GAAGd,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA2B,GAAEU,EAAG,KAAhC,CAAjB;AACA,QAAMG,YAAY,GAAGhB,EAAE,CAACiB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAFoC,CAIpC;;AACA,QAAMG,YAAY,GAAGhB,MAAM,CAACc,YAAD,CAA3B,CALoC,CAOpC;;AACA,QAAMW,gBAAgB,GAAG,MAAM7B,MAAM,GAClC8B,GAD4B,CACxB7B,IADwB,EAE5BM,OAF4B,CAEpBa,YAAY,CAACW,OAFO,CAA/B;AAGA,QAAMC,WAAW,GAAGH,gBAAgB,CAACI,QAAjB,EAApB,CAXoC,CAapC;;AACA;AACElB,IAAAA,EADF;AAEEiB,IAAAA;AAFF,KAGKZ,YAAY,CAACC,IAHlB;AAKD","sourcesContent":["import remark from 'remark';\nimport html from 'remark-html';\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\n\n\nconst postsDirectory = path.join(process.cwd(), 'posts');\n\nexport async function getSortedPostsData() {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map((fileName) => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, '');\n\n    // Read markdown file as string\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n\n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents);\n\n    // Combine the data with the id\n    return {\n      id,\n      ...matterResult.data,\n    };\n  });\n  // Sort posts by date\n  return allPostsData.sort(({ date: a }, { date: b }) => {\n    if (a < b) {\n      return 1;\n    } else if (a > b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n}\n\nexport function getAllPostIds() {\n    const fileNames = fs.readdirSync(postsDirectory);\n  \n    // Returns an array that looks like this:\n    // [\n    //   {\n    //     params: {\n    //       id: 'ssg-ssr'\n    //     }\n    //   },\n    //   {\n    //     params: {\n    //       id: 'pre-rendering'\n    //     }\n    //   }\n    // ]\n    return fileNames.map((fileName) => {\n      return {\n        params: {\n          id: fileName.replace(/\\.md$/, ''),\n        },\n      };\n    });\n  }\n\n  export async function getPostData(id) {\n    const fullPath = path.join(postsDirectory, `${id}.md`);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n  \n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents);\n  \n    // Use remark to convert markdown into HTML string\n    const processedContent = await remark()\n      .use(html)\n      .process(matterResult.content);\n    const contentHtml = processedContent.toString();\n  \n    // Combine the data with the id and contentHtml\n    return {\n      id,\n      contentHtml,\n      ...matterResult.data,\n    };\n  }"]},"metadata":{},"sourceType":"module"}